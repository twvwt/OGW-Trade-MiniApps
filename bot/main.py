<<<<<<< HEAD
import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from motor.motor_asyncio import AsyncIOMotorClient
from pymongo.errors import PyMongoError
from bson import ObjectId
import httpx
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI", "mongodb://localhost:27017")
DB_NAME = os.getenv("DB_NAME", "OGW")
ADMINS_COLLECTION = "admins"
ORDERS_COLLECTION = "orders"
USERS_COLLECTION = "users"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = AsyncIOMotorClient(MONGO_URI)
db = client[DB_NAME]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminActions(StatesGroup):
    ADD_ADMIN = State()
    REMOVE_ADMIN = State()

async def ensure_superadmin_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –∏–∑ .env –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    superadmin_id = int(os.getenv("SUPERADMIN_ID", 0))
    if not superadmin_id:
        print("‚ö†Ô∏è SUPERADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
        return

    existing_admin = await db[ADMINS_COLLECTION].find_one({"user_id": superadmin_id})
    if not existing_admin:
        await db[ADMINS_COLLECTION].insert_one({
            "user_id": superadmin_id,
            "is_superadmin": True,
            "added_at": datetime.now(),
            "username": "superadmin"
        })
        print(f"‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω {superadmin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")

async def get_admin_username(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ–º username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        admin = await db[ADMINS_COLLECTION].find_one({"user_id": user_id})
        return admin.get("username", f"ID{user_id}")
    except Exception:
        return f"ID{user_id}"
    
async def notify_admins_about_order(order_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    admins = await db[ADMINS_COLLECTION].find().to_list(None)
    
    for admin in admins:
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            message = (
                "üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
                f"üîπ *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* `{order_data['_id']}`\n"
                f"üîπ *–ö–ª–∏–µ–Ω—Ç:* {order_data['customer']['first_name']} {order_data['customer']['last_name']}\n"
                f"üîπ *–¢–µ–ª–µ—Ñ–æ–Ω:* `{order_data['customer']['phone']}`\n"
                f"üîπ *–°—É–º–º–∞:* {order_data['total']} ‚ÇΩ\n"
                f"üîπ *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* {order_data['payment_method']}\n"
                f"üîπ *–î–æ—Å—Ç–∞–≤–∫–∞:* {order_data['delivery_method']}\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å
            if order_data.get('user_info'):
                user_info = order_data['user_info']
                message += (
                    f"\n*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ Telegram:*\n"
                    f"ID: {user_info.get('telegram_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"Username: @{user_info.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–ò–º—è: {user_info.get('first_name', '')} {user_info.get('last_name', '')}\n"
                )
            
            message += "\n*–¢–æ–≤–∞—Ä—ã:*\n"
            
            for item in order_data['items']:
                message += f"- {item['product_name']} √ó {item['quantity']} = {item['price'] * item['quantity']} ‚ÇΩ\n"
                
            await bot.send_message(
                chat_id=admin['user_id'],
                text=message,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin['user_id']}: {e}")
            

async def notify_all_admins(message: str, parse_mode: str = "HTML"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    admins = await db[ADMINS_COLLECTION].find().to_list(None)
    print(admins)
    for admin in admins:
        print(admin['user_id'])
        try:
            await bot.send_message(
                chat_id=admin['user_id'],
                text=message,
                parse_mode=parse_mode
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin['user_id']}: {e}")

async def update_order_status(order_id: str, status: str, confirmed_by: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        result = await db[ORDERS_COLLECTION].update_one(
            {"_id": ObjectId(order_id)},
            {"$set": {
                "status": status,
                "confirmed_by": confirmed_by,
                "confirmed_at": datetime.now(),
                "updated_at": datetime.now()
            }}
        )
        return result.modified_count > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
        return False

@dp.callback_query(F.data.startswith("view_order_"))
async def view_order_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    order_id = callback.data.split("_")[-1]
    
    try:
        order = await db[ORDERS_COLLECTION].find_one({"_id": ObjectId(order_id)})
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        message = (
            f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}*\n\n"
            f"*–°—Ç–∞—Ç—É—Å:* {order.get('status', '–ù–æ–≤—ã–π')}\n"
        )
        
        if order.get('status') == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω":
            confirmed_by = await get_admin_username(order['confirmed_by'])
            confirmed_at = order['confirmed_at'].strftime("%d.%m.%Y %H:%M")
            message += f"*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:* {confirmed_by} ({confirmed_at})\n\n"
        
        await callback.message.edit_text(
            text=message,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–∫–∞–∑–∞: {e}")

@dp.callback_query(F.data.startswith("confirm_order_"))
async def confirm_order(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    order_id = callback.data.split("_")[-1]
    admin_id = callback.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order = await db[ORDERS_COLLECTION].find_one({"_id": ObjectId(order_id)})
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if order.get('status') == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω":
            confirmed_by = await get_admin_username(order['confirmed_by'])
            await callback.answer(
                f"–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '–ü–û–î–¢–í–ï–†–ñ–î–ï–ù'\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {confirmed_by}",
                show_alert=True
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        success = await update_order_status(order_id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", admin_id)
        if not success:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_name = await get_admin_username(admin_id)
        await notify_all_admins(
            f"‚úÖ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω*\n\n"
            f"üîπ *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* `{order_id}`\n"
            f"üîπ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª:* {admin_name}\n"
            f"üîπ *–í—Ä–µ–º—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"*–°—Ç–∞—Ç—É—Å:* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
            parse_mode="Markdown"
        )
        
        await callback.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", show_alert=True)
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")

async def watch_orders():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    last_order_id = None
    
    while True:
        try:
            # –ò—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –∑–∞–∫–∞–∑
            latest_order = await db[ORDERS_COLLECTION].find_one(
                {},
                sort=[('created_at', -1)]
            )
            print(latest_order.get('status'))
            if latest_order and latest_order['_id'] != last_order_id:
                last_order_id = latest_order['_id']
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ (—Å—Ç–∞—Ç—É—Å "–ù–æ–≤—ã–π")
                if latest_order.get('status') == "new":
                    print(latest_order.get('status'))
                    await notify_admins_about_order(latest_order)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_permissions = await check_user_permissions(message.from_user.id)
    
    builder = InlineKeyboardBuilder()
    
    if user_permissions["is_admin"]:
        builder.row(
            types.InlineKeyboardButton(
                text="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω",
                web_app=WebAppInfo(url="https://9b6aaa759924.ngrok-free.app/frontend")
            )
        )
        builder.row(
            types.InlineKeyboardButton(
                text="üõçÔ∏è–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                web_app=WebAppInfo(url="https://9b6aaa759924.ngrok-free.app/frontend/admin_panel.html")
            )
        )
        
        builder.row(
            types.InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data="stats"
            )
        )
        
        if user_permissions["is_superadmin"]:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏",
                    callback_data="admin_menu"
                )
            )
        
        await message.answer(
            "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=builder.as_markup()
        )
    else:
        builder.row(
            types.InlineKeyboardButton(
                text="üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
                web_app=WebAppInfo(url="https://9b6aaa759924.ngrok-free.app/frontend")
            )
        )
        
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!",
            reply_markup=builder.as_markup()
        )

async def check_user_permissions(user_id: int) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    admin_data = await db[ADMINS_COLLECTION].find_one({"user_id": user_id})
    if admin_data:
        return {
            "is_admin": True,
            "is_superadmin": admin_data.get("is_superadmin", False)
        }
    return {"is_admin": False, "is_superadmin": False}

@dp.callback_query(F.data == "admin_menu")
async def admin_management(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    user_permissions = await check_user_permissions(callback.from_user.id)
    if not user_permissions["is_superadmin"]:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="remove_admin")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="list_admins")]
    ])
    await callback.message.edit_text("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "add_admin")
async def add_admin_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")
    await state.set_state(AdminActions.ADD_ADMIN)
    await callback.answer()

@dp.message(AdminActions.ADD_ADMIN)
async def add_admin_finish(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        new_admin_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
        return

    if await db[ADMINS_COLLECTION].find_one({"user_id": new_admin_id}):
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await state.clear()
        return

    await db[ADMINS_COLLECTION].insert_one({
        "user_id": new_admin_id,
        "is_superadmin": False,
        "added_by": message.from_user.id,
        "added_at": datetime.now(),
        "username": message.from_user.username or f"ID{new_admin_id}"
    })

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await bot.send_message(
            chat_id=new_admin_id,
            text="üéâ –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö."
        )
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
    admin_name = await get_admin_username(message.from_user.id)
    await notify_all_admins(
        f"üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{admin_name}</b> –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ID {new_admin_id}"
    )

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    await state.clear()

@dp.callback_query(F.data == "remove_admin")
async def remove_admin_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    admins = await db[ADMINS_COLLECTION].find({"is_superadmin": False}).to_list(None)
    if not admins:
        await callback.message.answer("‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback.answer()
        return

    keyboard = InlineKeyboardBuilder()
    for admin in admins:
        keyboard.row(InlineKeyboardButton(
            text=f"ID {admin['user_id']} ({admin.get('username', '')})",
            callback_data=f"remove_admin_{admin['user_id']}"
        ))

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("remove_admin_"))
async def remove_admin_finish(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin_id = int(callback.data.split("_")[-1])
    if admin_id == int(os.getenv("SUPERADMIN_ID")):
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞!", show_alert=True)
        return

    result = await db[ADMINS_COLLECTION].delete_one({"user_id": admin_id})
    if result.deleted_count > 0:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            await bot.send_message(
                chat_id=admin_id,
                text="‚ÑπÔ∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã."
            )
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
        admin_name = await get_admin_username(callback.from_user.id)
        removed_admin = await get_admin_username(admin_id)
        await notify_all_admins(
            f"üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{admin_name}</b> —É–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {removed_admin} (ID {admin_id})"
        )

        await callback.message.edit_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ID {admin_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.edit_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()

@dp.callback_query(F.data == "list_admins")
async def list_admins(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    admins = await db[ADMINS_COLLECTION].find().sort("is_superadmin", -1).to_list(None)
    if not admins:
        await callback.message.answer("‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ.")
        await callback.answer()
        return

    message = ["üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"]
    for admin in admins:
        status = " (—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)" if admin.get("is_superadmin") else ""
        added_at = admin.get("added_at", datetime.now()).strftime("%d.%m.%Y")
        username = admin.get("username", "")
        message.append(f"‚Ä¢ <code>{admin['user_id']}</code> {username}{status} - –¥–æ–±–∞–≤–ª–µ–Ω {added_at}")

    await callback.message.answer("\n".join(message), parse_mode="HTML")
    await callback.answer()

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await db[ADMINS_COLLECTION].create_index([("user_id", 1)], unique=True)
    await db[ORDERS_COLLECTION].create_index([("status", 1)])
    await db[ORDERS_COLLECTION].create_index([("created_at", -1)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –∏–∑ .env
    await ensure_superadmin_exists()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
    await notify_all_admins("ü§ñ –ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    asyncio.create_task(watch_orders())

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
=======
import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from motor.motor_asyncio import AsyncIOMotorClient
from pymongo.errors import PyMongoError
from bson import ObjectId
import httpx
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI", "mongodb://localhost:27017")
DB_NAME = os.getenv("DB_NAME", "OGW")
ADMINS_COLLECTION = "admins"
ORDERS_COLLECTION = "orders"
USERS_COLLECTION = "users"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = AsyncIOMotorClient(MONGO_URI)
db = client[DB_NAME]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminActions(StatesGroup):
    ADD_ADMIN = State()
    REMOVE_ADMIN = State()

async def ensure_superadmin_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –∏–∑ .env –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    superadmin_id = int(os.getenv("SUPERADMIN_ID", 0))
    if not superadmin_id:
        print("‚ö†Ô∏è SUPERADMIN_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
        return

    existing_admin = await db[ADMINS_COLLECTION].find_one({"user_id": superadmin_id})
    if not existing_admin:
        await db[ADMINS_COLLECTION].insert_one({
            "user_id": superadmin_id,
            "is_superadmin": True,
            "added_at": datetime.now(),
            "username": "superadmin"
        })
        print(f"‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω {superadmin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")

async def get_admin_username(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ–º username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        admin = await db[ADMINS_COLLECTION].find_one({"user_id": user_id})
        return admin.get("username", f"ID{user_id}")
    except Exception:
        return f"ID{user_id}"
    
async def notify_admins_about_order(order_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    admins = await db[ADMINS_COLLECTION].find().to_list(None)
    
    for admin in admins:
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            message = (
                "üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
                f"üîπ *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* `{order_data['_id']}`\n"
                f"üîπ *–ö–ª–∏–µ–Ω—Ç:* {order_data['customer']['first_name']} {order_data['customer']['last_name']}\n"
                f"üîπ *–¢–µ–ª–µ—Ñ–æ–Ω:* `{order_data['customer']['phone']}`\n"
                f"üîπ *–°—É–º–º–∞:* {order_data['total']} ‚ÇΩ\n"
                f"üîπ *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* {order_data['payment_method']}\n"
                f"üîπ *–î–æ—Å—Ç–∞–≤–∫–∞:* {order_data['delivery_method']}\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å
            if order_data.get('user_info'):
                user_info = order_data['user_info']
                message += (
                    f"\n*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ Telegram:*\n"
                    f"ID: {user_info.get('telegram_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"Username: @{user_info.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–ò–º—è: {user_info.get('first_name', '')} {user_info.get('last_name', '')}\n"
                )
            
            message += "\n*–¢–æ–≤–∞—Ä—ã:*\n"
            
            for item in order_data['items']:
                message += f"- {item['product_name']} √ó {item['quantity']} = {item['price'] * item['quantity']} ‚ÇΩ\n"
                
            await bot.send_message(
                chat_id=admin['user_id'],
                text=message,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin['user_id']}: {e}")
            

async def notify_all_admins(message: str, parse_mode: str = "HTML"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    admins = await db[ADMINS_COLLECTION].find().to_list(None)
    print(admins)
    for admin in admins:
        print(admin['user_id'])
        try:
            await bot.send_message(
                chat_id=admin['user_id'],
                text=message,
                parse_mode=parse_mode
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin['user_id']}: {e}")

async def update_order_status(order_id: str, status: str, confirmed_by: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        result = await db[ORDERS_COLLECTION].update_one(
            {"_id": ObjectId(order_id)},
            {"$set": {
                "status": status,
                "confirmed_by": confirmed_by,
                "confirmed_at": datetime.now(),
                "updated_at": datetime.now()
            }}
        )
        return result.modified_count > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
        return False

@dp.callback_query(F.data.startswith("view_order_"))
async def view_order_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    order_id = callback.data.split("_")[-1]
    
    try:
        order = await db[ORDERS_COLLECTION].find_one({"_id": ObjectId(order_id)})
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        message = (
            f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{order_id}*\n\n"
            f"*–°—Ç–∞—Ç—É—Å:* {order.get('status', '–ù–æ–≤—ã–π')}\n"
        )
        
        if order.get('status') == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω":
            confirmed_by = await get_admin_username(order['confirmed_by'])
            confirmed_at = order['confirmed_at'].strftime("%d.%m.%Y %H:%M")
            message += f"*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:* {confirmed_by} ({confirmed_at})\n\n"
        
        await callback.message.edit_text(
            text=message,
            parse_mode="Markdown"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–∫–∞–∑–∞: {e}")

@dp.callback_query(F.data.startswith("confirm_order_"))
async def confirm_order(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    order_id = callback.data.split("_")[-1]
    admin_id = callback.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order = await db[ORDERS_COLLECTION].find_one({"_id": ObjectId(order_id)})
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if order.get('status') == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω":
            confirmed_by = await get_admin_username(order['confirmed_by'])
            await callback.answer(
                f"–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '–ü–û–î–¢–í–ï–†–ñ–î–ï–ù'\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {confirmed_by}",
                show_alert=True
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        success = await update_order_status(order_id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", admin_id)
        if not success:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_name = await get_admin_username(admin_id)
        await notify_all_admins(
            f"‚úÖ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω*\n\n"
            f"üîπ *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* `{order_id}`\n"
            f"üîπ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª:* {admin_name}\n"
            f"üîπ *–í—Ä–µ–º—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"*–°—Ç–∞—Ç—É—Å:* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
            parse_mode="Markdown"
        )
        
        await callback.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", show_alert=True)
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")

async def watch_orders():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    last_order_id = None
    
    while True:
        try:
            # –ò—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –∑–∞–∫–∞–∑
            latest_order = await db[ORDERS_COLLECTION].find_one(
                {},
                sort=[('created_at', -1)]
            )
            print(latest_order.get('status'))
            if latest_order and latest_order['_id'] != last_order_id:
                last_order_id = latest_order['_id']
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ (—Å—Ç–∞—Ç—É—Å "–ù–æ–≤—ã–π")
                if latest_order.get('status') == "new":
                    print(latest_order.get('status'))
                    await notify_admins_about_order(latest_order)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_permissions = await check_user_permissions(message.from_user.id)
    
    builder = InlineKeyboardBuilder()
    
    if user_permissions["is_admin"]:
        builder.row(
            types.InlineKeyboardButton(
                text="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω",
                web_app=WebAppInfo(url="https://9b6aaa759924.ngrok-free.app/frontend")
            )
        )
        builder.row(
            types.InlineKeyboardButton(
                text="üõçÔ∏è–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                web_app=WebAppInfo(url="https://9b6aaa759924.ngrok-free.app/frontend/admin_panel.html")
            )
        )
        
        builder.row(
            types.InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data="stats"
            )
        )
        
        if user_permissions["is_superadmin"]:
            builder.row(
                types.InlineKeyboardButton(
                    text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏",
                    callback_data="admin_menu"
                )
            )
        
        await message.answer(
            "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=builder.as_markup()
        )
    else:
        builder.row(
            types.InlineKeyboardButton(
                text="üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
                web_app=WebAppInfo(url="https://9b6aaa759924.ngrok-free.app/frontend")
            )
        )
        
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!",
            reply_markup=builder.as_markup()
        )

async def check_user_permissions(user_id: int) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    admin_data = await db[ADMINS_COLLECTION].find_one({"user_id": user_id})
    if admin_data:
        return {
            "is_admin": True,
            "is_superadmin": admin_data.get("is_superadmin", False)
        }
    return {"is_admin": False, "is_superadmin": False}

@dp.callback_query(F.data == "admin_menu")
async def admin_management(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    user_permissions = await check_user_permissions(callback.from_user.id)
    if not user_permissions["is_superadmin"]:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="remove_admin")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="list_admins")]
    ])
    await callback.message.edit_text("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "add_admin")
async def add_admin_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")
    await state.set_state(AdminActions.ADD_ADMIN)
    await callback.answer()

@dp.message(AdminActions.ADD_ADMIN)
async def add_admin_finish(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        new_admin_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
        return

    if await db[ADMINS_COLLECTION].find_one({"user_id": new_admin_id}):
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await state.clear()
        return

    await db[ADMINS_COLLECTION].insert_one({
        "user_id": new_admin_id,
        "is_superadmin": False,
        "added_by": message.from_user.id,
        "added_at": datetime.now(),
        "username": message.from_user.username or f"ID{new_admin_id}"
    })

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await bot.send_message(
            chat_id=new_admin_id,
            text="üéâ –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö."
        )
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
    admin_name = await get_admin_username(message.from_user.id)
    await notify_all_admins(
        f"üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{admin_name}</b> –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ID {new_admin_id}"
    )

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    await state.clear()

@dp.callback_query(F.data == "remove_admin")
async def remove_admin_start(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    admins = await db[ADMINS_COLLECTION].find({"is_superadmin": False}).to_list(None)
    if not admins:
        await callback.message.answer("‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback.answer()
        return

    keyboard = InlineKeyboardBuilder()
    for admin in admins:
        keyboard.row(InlineKeyboardButton(
            text=f"ID {admin['user_id']} ({admin.get('username', '')})",
            callback_data=f"remove_admin_{admin['user_id']}"
        ))

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("remove_admin_"))
async def remove_admin_finish(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin_id = int(callback.data.split("_")[-1])
    if admin_id == int(os.getenv("SUPERADMIN_ID")):
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞!", show_alert=True)
        return

    result = await db[ADMINS_COLLECTION].delete_one({"user_id": admin_id})
    if result.deleted_count > 0:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            await bot.send_message(
                chat_id=admin_id,
                text="‚ÑπÔ∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã."
            )
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
        admin_name = await get_admin_username(callback.from_user.id)
        removed_admin = await get_admin_username(admin_id)
        await notify_all_admins(
            f"üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{admin_name}</b> —É–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {removed_admin} (ID {admin_id})"
        )

        await callback.message.edit_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ID {admin_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.edit_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()

@dp.callback_query(F.data == "list_admins")
async def list_admins(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    admins = await db[ADMINS_COLLECTION].find().sort("is_superadmin", -1).to_list(None)
    if not admins:
        await callback.message.answer("‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ.")
        await callback.answer()
        return

    message = ["üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"]
    for admin in admins:
        status = " (—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)" if admin.get("is_superadmin") else ""
        added_at = admin.get("added_at", datetime.now()).strftime("%d.%m.%Y")
        username = admin.get("username", "")
        message.append(f"‚Ä¢ <code>{admin['user_id']}</code> {username}{status} - –¥–æ–±–∞–≤–ª–µ–Ω {added_at}")

    await callback.message.answer("\n".join(message), parse_mode="HTML")
    await callback.answer()

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await db[ADMINS_COLLECTION].create_index([("user_id", 1)], unique=True)
    await db[ORDERS_COLLECTION].create_index([("status", 1)])
    await db[ORDERS_COLLECTION].create_index([("created_at", -1)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –∏–∑ .env
    await ensure_superadmin_exists()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
    await notify_all_admins("ü§ñ –ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    asyncio.create_task(watch_orders())

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
>>>>>>> 134c63ca506067908136bfb1f963410f464c349a
    asyncio.run(main())